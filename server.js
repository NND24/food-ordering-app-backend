const express = require("express");
require("dotenv").config();
require("express-async-errors");
const cors = require("cors");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const { errorHandler } = require("./middlewares/errorHandler");
const connectDB = require("./config/db_connection");
const http = require("http");
const socketIo = require("socket.io");
const morgan = require("morgan");

const { setSocketIo, getUserSockets, registerStoreSocket, getStoreSockets } = require("./utils/socketManager");
const Notification = require("./models/notification.model");
const swaggerUi = require("swagger-ui-express");
const swaggerJsdoc = require("swagger-jsdoc");

// Routes
const authRoute = require("./routes/auth.routes");
const customerStoreRoute = require("./routes/customerStore.routes");
const cartRoute = require("./routes/cart.routes");
const orderRoute = require("./routes/order.routes");
const favoriteRoute = require("./routes/favorite.routes");
const locationRoute = require("./routes/location.routes");
const notificationRoute = require("./routes/notification.routes");
const userRoute = require("./routes/user.routes");
const uploadRoute = require("./routes/upload.routes");
const ratingRoute = require("./routes/rating.routes");
const dishRoute = require("./routes/dish.routes");
const toppingRoute = require("./routes/topping.routes");
const categoryRoute = require("./routes/category.routes");
const statisticsRoute = require("./routes/statistics.routes");
const systemCategoryRoute = require("./routes/systemCategory.routes");
const voucherRoute = require("./routes/voucher.routes");
const paymentRoute = require("./routes/payment.route");
const staffRoute = require("./routes/staff.routes");
const shippingFeeRoute = require("./routes/shippingFee.routes");
const storeRoute = require("./routes/store.routes");

const app = express();
connectDB();

app.use(morgan("dev"));
app.use(
  cors({
    origin: [
      "http://localhost:3000",
      "http://localhost:3001",
      "http://192.168.1.10:3000",
    ],
    credentials: true,
  })
);
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());

PORT = process.env.PORT || 5000;

const swaggerDefinition = {
  openapi: "3.0.0",
  info: {
    title: "My API",
    version: "1.0.0",
    description: "Example Express API with autogenerated Swagger doc",
  },
  servers: [
    {
      url: `http://localhost:${PORT}`, // URL server backend
    },
  ],
};

const options = {
  swaggerDefinition,
  apis: ["./services/**/*.routes.js"], // đường dẫn chứa comment swagger
};

const swaggerSpec = swaggerJsdoc(options);

// Route Swagger UI
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

app.get("/health", (req, res) => {
  res.status(200).json({ status: "OK" });
});

// Routes
app.use("/api/v1/auth", authRoute);
app.use("/api/v1/customer-store", customerStoreRoute);
app.use("/api/v1/cart", cartRoute);
app.use("/api/v1/order", orderRoute);
app.use("/api/v1/favorite", favoriteRoute);
app.use("/api/v1/location", locationRoute);
app.use("/api/v1/notification", notificationRoute);
app.use("/api/v1/user", userRoute);
app.use("/api/v1/upload", uploadRoute);
app.use("/api/v1/rating", ratingRoute);
app.use("/api/v1/dish", dishRoute);
app.use("/api/v1/topping", toppingRoute);
app.use("/api/v1/category", categoryRoute);
app.use("/api/v1/statistics", statisticsRoute);
app.use("/api/v1/system-category", systemCategoryRoute);
app.use("/api/v1/voucher", voucherRoute);
app.use("/api/v1/payment", paymentRoute);
app.use("/api/v1/staff", staffRoute);
app.use("/api/v1/shipping-fee", shippingFeeRoute);
app.use("/api/v1/store", storeRoute);
app.use(errorHandler);

const server = http.createServer(app);
const io = socketIo(server, { cors: { origin: "*" } });

setSocketIo(io); // Make io accessible everywhere
const userSockets = getUserSockets();

io.on("connection", (socket) => {
  socket.on("registerUser", async (userId) => {
    // Nếu userId chưa có trong userSockets, tạo mảng mới
    if (!userSockets[userId]) {
      userSockets[userId] = [];
    }

    // Thêm socket id vào mảng của user
    userSockets[userId].push(socket.id);

    console.log(`User ${userId} connected with socket ID: ${socket.id}`);

    // Khi user kết nối, lấy tất cả thông báo của họ
    try {
      const allNotifications = await Notification.find({ userId }).sort({
        createdAt: -1,
      });
      socket.emit("getAllNotifications", allNotifications); // Gửi về client
    } catch (error) {
      console.error("Lỗi lấy thông báo:", error);
    }
  });

  socket.on("registerStore", (storeId) => {
    registerStoreSocket(storeId, socket.id);
    console.log(`Store ${storeId} connected with socket ${socket.id}`);
    console.log(getStoreSockets())
  });

  // Gửi thông báo đến tất cả các thiết bị của một user
  socket.on(
    "sendNotification",
    async ({ userId, title, message, type, orderId }) => {
      try {
        console.log(
          `[NOTIFICATION] Sending notification to user ${userId}: ${title}`
        );
        console.log("[NOTIFICATION]", {
          userId,
          title,
          message,
          type,
          orderId,
        });
        const newNotification = new Notification({
          userId,
          title,
          message,
          type,
          orderId,
        });
        await newNotification.save();

        // Gửi thông báo đến tất cả các socket ids của userId
        if (userSockets[userId]) {
          userSockets[userId].forEach((socketId) => {
            io.to(socketId).emit("newNotification", newNotification);
            console.log(
              `[NOTIFICATION] Notification sent to socket ID: ${socketId}`
            );
          });
        }
      } catch (error) {
        console.error("Lỗi gửi thông báo:", error);
      }
    }
  );

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    for (let userId in userSockets) {
      const socketIndex = userSockets[userId].indexOf(socket.id);
      if (socketIndex !== -1) {
        userSockets[userId].splice(socketIndex, 1);
        console.log(
          `User ${userId} disconnected, removed socket ID: ${socket.id}`
        );
        break;
      }
    }
  });
});

server.listen(PORT, "0.0.0.0", () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
