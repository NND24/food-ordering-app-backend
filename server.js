const express = require("express");
require("dotenv").config();
require("express-async-errors");
const cors = require("cors");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const { errorHandler } = require("./middlewares/errorHandler");
const connectDB = require("./config/db_connection");
const http = require("http");
const socketIo = require("socket.io");
const morgan = require("morgan");

const {
  setSocketIo,
  getUserSockets,
  registerStoreSocket,
  getStoreSockets,
  unregisterStoreSocket,
  unregisterUserSocket,
  registerUserSocket,
} = require("./utils/socketManager");
const Notification = require("./models/notification.model");
const swaggerUi = require("swagger-ui-express");
const swaggerJsdoc = require("swagger-jsdoc");

// Routes
const authRoute = require("./routes/auth.routes");
const customerStoreRoute = require("./routes/customerStore.routes");
const cartRoute = require("./routes/cart.routes");
const orderRoute = require("./routes/order.routes");
const favoriteRoute = require("./routes/favorite.routes");
const locationRoute = require("./routes/location.routes");
const notificationRoute = require("./routes/notification.routes");
const userRoute = require("./routes/user.routes");
const uploadRoute = require("./routes/upload.routes");
const ratingRoute = require("./routes/rating.routes");
const dishRoute = require("./routes/dish.routes");
const toppingRoute = require("./routes/topping.routes");
const dishGroupRoute = require("./routes/dishGroup.routes");
const statisticsRoute = require("./routes/statistics.routes");
const systemCategoryRoute = require("./routes/systemCategory.routes");
const voucherRoute = require("./routes/voucher.routes");
const paymentRoute = require("./routes/payment.route");
const staffRoute = require("./routes/staff.routes");
const shippingFeeRoute = require("./routes/shippingFee.routes");
const storeRoute = require("./routes/store.routes");
const ingredientCategoryRoute = require("./routes/ingredientCategory.routes");
const ingredientRoute = require("./routes/ingredient.routes");
const ingredientBatchRoute = require("./routes/ingredientBatch.routes");
const wasteRoute = require("./routes/waste.routes");
const unitRoute = require("./routes/unit.routes");

const app = express();
connectDB();
require("./config/expireBatches");
require("./config/recommendData.cron");

app.use(morgan("dev"));
app.use(
  cors({
    origin: ["http://localhost:3000", "http://localhost:3001", "http://192.168.1.10:3000"],
    credentials: true,
  })
);
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());

PORT = process.env.PORT || 5000;

const swaggerDefinition = {
  openapi: "3.0.0",
  info: {
    title: "My API",
    version: "1.0.0",
    description: "Example Express API with autogenerated Swagger doc",
  },
  servers: [
    {
      url: `http://localhost:${PORT}`, // URL server backend
    },
  ],
};

const options = {
  swaggerDefinition,
  apis: ["./services/**/*.routes.js"], // đường dẫn chứa comment swagger
};

const swaggerSpec = swaggerJsdoc(options);

// Route Swagger UI
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

app.get("/health", (req, res) => {
  res.status(200).json({ status: "OK" });
});

// Routes
app.use("/api/v1/auth", authRoute);
app.use("/api/v1/customer-store", customerStoreRoute);
app.use("/api/v1/cart", cartRoute);
app.use("/api/v1/order", orderRoute);
app.use("/api/v1/favorite", favoriteRoute);
app.use("/api/v1/location", locationRoute);
app.use("/api/v1/notification", notificationRoute);
app.use("/api/v1/user", userRoute);
app.use("/api/v1/upload", uploadRoute);
app.use("/api/v1/rating", ratingRoute);
app.use("/api/v1/dish", dishRoute);
app.use("/api/v1/dish-group", dishGroupRoute);
app.use("/api/v1/topping", toppingRoute);
app.use("/api/v1/statistics", statisticsRoute);
app.use("/api/v1/system-category", systemCategoryRoute);
app.use("/api/v1/voucher", voucherRoute);
app.use("/api/v1/payment", paymentRoute);
app.use("/api/v1/staff", staffRoute);
app.use("/api/v1/shipping-fee", shippingFeeRoute);
app.use("/api/v1/store", storeRoute);
app.use("/api/v1/ingredient-category", ingredientCategoryRoute);
app.use("/api/v1/ingredient", ingredientRoute);
wasteRoute;
app.use("/api/v1/ingredient-batch", ingredientBatchRoute);
app.use("/api/v1/waste", wasteRoute);
app.use("/api/v1/unit", unitRoute);
app.use(errorHandler);

const server = http.createServer(app);
const io = socketIo(server, { cors: { origin: "*" } });

setSocketIo(io); // Make io accessible everywhere
const userSockets = getUserSockets();
const storeSockets = getStoreSockets();

io.on("connection", (socket) => {
  console.log(`Socket connected: ${socket.id}`);

  // --- USER ---
  socket.on("registerUser", async (userId) => {
    registerUserSocket(userId, socket.id);
    console.log(`User ${userId} connected with socket ${socket.id}`);

    try {
      const allNotifications = await Notification.find({ userId }).sort({ createdAt: -1 });
      socket.emit("getAllNotifications", allNotifications);
    } catch (error) {
      console.error("Lỗi lấy thông báo user:", error);
    }
  });

  // --- STORE ---
  socket.on("registerStore", async (storeId) => {
    registerStoreSocket(storeId, socket.id);
    console.log(`Store ${storeId} connected with socket ${socket.id}`);

    try {
      const allNotifications = await Notification.find({ storeId }).sort({ createdAt: -1 });
      socket.emit("getAllNotifications", allNotifications);
    } catch (error) {
      console.error("Lỗi lấy thông báo store:", error);
    }
  });

  // --- GỬI THÔNG BÁO ---
  socket.on("sendNotification", async ({ userId, storeId, title, message, type, orderId }) => {
    try {
      const newNotification = new Notification({
        userId,
        storeId,
        title,
        message,
        type,
        orderId,
      });
      await newNotification.save();

      console.log("[NOTIFICATION] New:", { userId, storeId, title });

      // Gửi cho user
      if (userId && userSockets[userId]) {
        userSockets[userId].forEach((socketId) => {
          io.to(socketId).emit("newNotification", newNotification);
          console.log(`[NOTIFICATION] Sent to user socket ${socketId}`);
        });
      }

      // Gửi cho store
      if (storeId && storeSockets[storeId]) {
        storeSockets[storeId].forEach((socketId) => {
          io.to(socketId).emit("newNotification", newNotification);
          console.log(`[NOTIFICATION] Sent to store socket ${socketId}`);
        });
      }
    } catch (error) {
      console.error("Lỗi gửi thông báo:", error);
    }
  });

  // --- NGẮT KẾT NỐI ---
  socket.on("disconnect", () => {
    console.log("Socket disconnected:", socket.id);

    // Xóa khỏi userSockets
    for (let userId in userSockets) {
      if (userSockets[userId].includes(socket.id)) {
        unregisterUserSocket(userId, socket.id);
        console.log(`Removed socket ${socket.id} from user ${userId}`);
      }
    }

    // Xóa khỏi storeSockets
    for (let storeId in storeSockets) {
      if (storeSockets[storeId].includes(socket.id)) {
        unregisterStoreSocket(storeId, socket.id);
        console.log(`Removed socket ${socket.id} from store ${storeId}`);
      }
    }
  });
});

server.listen(PORT, "0.0.0.0", () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
